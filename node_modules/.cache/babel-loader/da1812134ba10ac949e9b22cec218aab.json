{"ast":null,"code":"import { DEFAULT_CURRENCY, FLOAT_POINT, NUM_POWER } from \"../assets/js/constants\";\nimport { getCoinIcon } from \"./coinIconMap\";\n\nconst getShortenNumber = value => {\n  if (value >= NUM_POWER.TRILLION) return {\n    symbol: \"t\",\n    value: value / NUM_POWER.TRILLION\n  };\n  if (value >= NUM_POWER.BILLION) return {\n    symbol: \"b\",\n    value: value / NUM_POWER.BILLION\n  };\n  if (value >= NUM_POWER.MILLION) return {\n    symbol: \"m\",\n    value: value / NUM_POWER.MILLION\n  };\n  if (value < 1) return {\n    symbol: \"\",\n    value\n  };\n  return {\n    symbol: \"\",\n    value\n  };\n};\n\nconst getParsedCurrency = function (valueString) {\n  let currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CURRENCY;\n  if (!valueString) return \"-\";\n  const number = parseFloat(valueString);\n  const {\n    symbol,\n    value\n  } = getShortenNumber(number);\n  const fractionsDigits = value < 1 ? FLOAT_POINT.SMALL_NUMBER : FLOAT_POINT.BIG_NUMBER;\n  return `${new Intl.NumberFormat(\"en-US\", {\n    style: currency ? \"currency\" : \"decimal\",\n    currency: currency || DEFAULT_CURRENCY,\n    currencyDisplay: \"symbol\",\n    minimumFractionDigits: fractionsDigits,\n    maximumFractionDigits: fractionsDigits\n  }).format(value)}${symbol}`;\n};\n\nexport const getParsedPercent = percent => {\n  if (!percent) {\n    return {\n      percent: \"-\"\n    };\n  }\n\n  const parsedPercent = parseFloat(percent);\n  return {\n    percent: `${parsedPercent.toFixed(2)}%`,\n    positive: parsedPercent > 0 ? \"up\" : \"down\"\n  };\n};\nexport const getParsedData = (data, currency) => {\n  const percentData = getParsedPercent(data.changePercent24Hr);\n  return {\n    rank: data.rank,\n    icon: getCoinIcon(data.symbol),\n    name: data.name,\n    shortName: data.symbol,\n    price: getParsedCurrency(data.priceUsd, currency),\n    marketCap: getParsedCurrency(data.marketCapUsd, currency),\n    vwap24h: getParsedCurrency(data.vwap24Hr, currency),\n    supply: getParsedCurrency(data.supply, false),\n    volume24h: getParsedCurrency(data.volumeUsd24Hr, currency),\n    percent: percentData.percent,\n    positive: percentData.positive\n  };\n};","map":{"version":3,"names":["DEFAULT_CURRENCY","FLOAT_POINT","NUM_POWER","getCoinIcon","getShortenNumber","value","TRILLION","symbol","BILLION","MILLION","getParsedCurrency","valueString","currency","number","parseFloat","fractionsDigits","SMALL_NUMBER","BIG_NUMBER","Intl","NumberFormat","style","currencyDisplay","minimumFractionDigits","maximumFractionDigits","format","getParsedPercent","percent","parsedPercent","toFixed","positive","getParsedData","data","percentData","changePercent24Hr","rank","icon","name","shortName","price","priceUsd","marketCap","marketCapUsd","vwap24h","vwap24Hr","supply","volume24h","volumeUsd24Hr"],"sources":["/home/muneeb/Documents/coincap-clone-main/src/helpers/currencyParser.ts"],"sourcesContent":["import { CurrencyData } from \"../api/types\";\nimport { DEFAULT_CURRENCY, FLOAT_POINT, NUM_POWER } from \"../assets/js/constants\";\nimport { getCoinIcon } from \"./coinIconMap\";\n\ntype NumberSymbolType = \"b\" | \"t\" | \"m\" | \"\";\n\ninterface ShortenNumberReturn {\n  value: number;\n  symbol: NumberSymbolType;\n}\n\nconst getShortenNumber = (value: number): ShortenNumberReturn => {\n  if (value >= NUM_POWER.TRILLION) return { symbol: \"t\", value: value / NUM_POWER.TRILLION };\n  if (value >= NUM_POWER.BILLION) return { symbol: \"b\", value: value / NUM_POWER.BILLION };\n  if (value >= NUM_POWER.MILLION) return { symbol: \"m\", value: value / NUM_POWER.MILLION };\n  if (value < 1) return { symbol: \"\", value };\n  return { symbol: \"\", value };\n};\n\nconst getParsedCurrency = (\n  valueString?: string | null,\n  currency: string | false = DEFAULT_CURRENCY,\n) => {\n  if (!valueString) return \"-\";\n  const number = parseFloat(valueString);\n  const { symbol, value } = getShortenNumber(number);\n  const fractionsDigits = value < 1 ? FLOAT_POINT.SMALL_NUMBER : FLOAT_POINT.BIG_NUMBER;\n  return `${new Intl.NumberFormat(\"en-US\", {\n    style: currency ? \"currency\" : \"decimal\",\n    currency: currency || DEFAULT_CURRENCY,\n    currencyDisplay: \"symbol\",\n    minimumFractionDigits: fractionsDigits,\n    maximumFractionDigits: fractionsDigits,\n  }).format(value)}${symbol}`;\n};\n\ninterface ParsedPercentReturn {\n  percent: string;\n  positive?: \"up\" | \"down\";\n}\n\nexport const getParsedPercent = (percent?: string | null): ParsedPercentReturn => {\n  if (!percent) {\n    return {\n      percent: \"-\",\n    };\n  }\n  const parsedPercent = parseFloat(percent);\n  return {\n    percent: `${parsedPercent.toFixed(2)}%`,\n    positive: parsedPercent > 0 ? \"up\" : \"down\",\n  };\n};\n\ninterface GetParsedDataReturn {\n  rank: string;\n  icon: string;\n  name: string;\n  shortName: string;\n  price: string;\n  marketCap: string;\n  vwap24h: string;\n  supply: string;\n  volume24h: string;\n  percent: string;\n  positive?: \"up\" | \"down\";\n}\n\nexport const getParsedData = (data: CurrencyData, currency?: string): GetParsedDataReturn => {\n  const percentData = getParsedPercent(data.changePercent24Hr);\n  return {\n    rank: data.rank,\n    icon: getCoinIcon(data.symbol),\n    name: data.name,\n    shortName: data.symbol,\n    price: getParsedCurrency(data.priceUsd, currency),\n    marketCap: getParsedCurrency(data.marketCapUsd, currency),\n    vwap24h: getParsedCurrency(data.vwap24Hr, currency),\n    supply: getParsedCurrency(data.supply, false),\n    volume24h: getParsedCurrency(data.volumeUsd24Hr, currency),\n    percent: percentData.percent,\n    positive: percentData.positive,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}