{"ast":null,"code":"import { buffers, eventChannel } from \"redux-saga\";\nimport { put, select, takeEvery, call, take, fork, delay } from \"redux-saga/effects\";\nimport { FetchApi } from \"../../api/fetchService\";\nimport { WssApi } from \"../../api/wsService\";\nimport { setCurrencyData, setMaxPage, setNewPrices } from \"./action\";\nimport { getCurrencyCapacity } from \"./selector\";\nimport { CurrencyActionTypes } from \"./types\";\n\nfunction createSocketCurrency(socket) {\n  return eventChannel(emit => {\n    socket.openConnection();\n    socket.onMessage(response => {\n      const data = JSON.parse(response.data);\n      emit(data);\n    });\n    return () => {\n      socket.closeConnection();\n    };\n  }, buffers.sliding(5));\n}\n\nfunction* watchNewCurrency() {\n  const socketChanel = yield call(createSocketCurrency, WssApi);\n\n  while (true) {\n    try {\n      const payload = yield take(socketChanel);\n      yield delay(1000);\n      yield put(setNewPrices(payload));\n    } catch {\n      socketChanel.close();\n    }\n  }\n}\n\nfunction* fetchCurrencyList() {\n  try {\n    const currencyListData = yield call(FetchApi.getCurrencyList);\n    const currencyPerPage = yield select(getCurrencyCapacity);\n    const maxPossiblePages = Math.ceil(currencyListData.length / currencyPerPage);\n    yield put(setMaxPage(maxPossiblePages));\n    yield put(setCurrencyData(currencyListData));\n    yield fork(watchNewCurrency);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n}\n\nexport function* watchFetchCurrencyList() {\n  yield takeEvery(CurrencyActionTypes.FETCH_CURRENCY_DATA, fetchCurrencyList);\n}","map":{"version":3,"names":["buffers","eventChannel","put","select","takeEvery","call","take","fork","delay","FetchApi","WssApi","setCurrencyData","setMaxPage","setNewPrices","getCurrencyCapacity","CurrencyActionTypes","createSocketCurrency","socket","emit","openConnection","onMessage","response","data","JSON","parse","closeConnection","sliding","watchNewCurrency","socketChanel","payload","close","fetchCurrencyList","currencyListData","getCurrencyList","currencyPerPage","maxPossiblePages","Math","ceil","length","error","console","log","watchFetchCurrencyList","FETCH_CURRENCY_DATA"],"sources":["/home/muneeb/Documents/coincap-clone-main/src/store/currency/saga.ts"],"sourcesContent":["import { buffers, EventChannel, eventChannel } from \"redux-saga\";\nimport { ForkEffect, put, select, takeEvery, call, take, fork, delay } from \"redux-saga/effects\";\nimport { FetchApi } from \"../../api/fetchService\";\nimport { CurrencyData, SocketCurrencyResonpse } from \"../../api/types\";\nimport { WebSocketService, WssApi } from \"../../api/wsService\";\nimport { ActionTypes } from \"../../types/redux\";\nimport { setCurrencyData, setMaxPage, setNewPrices } from \"./action\";\nimport { getCurrencyCapacity } from \"./selector\";\nimport { CurrencyActionTypes } from \"./types\";\n\nfunction createSocketCurrency(socket: WebSocketService) {\n  return eventChannel((emit) => {\n    socket.openConnection();\n    socket.onMessage((response) => {\n      const data = JSON.parse(response.data);\n      emit(data);\n    });\n    return () => {\n      socket.closeConnection();\n    };\n  }, buffers.sliding(5));\n}\n\nfunction* watchNewCurrency() {\n  const socketChanel: EventChannel<unknown> = yield call(createSocketCurrency, WssApi);\n  while (true) {\n    try {\n      const payload: SocketCurrencyResonpse = yield take(socketChanel);\n      yield delay(1000);\n      yield put(setNewPrices(payload));\n    } catch {\n      socketChanel.close();\n    }\n  }\n}\n\nfunction* fetchCurrencyList() {\n  try {\n    const currencyListData: CurrencyData[] = yield call(FetchApi.getCurrencyList);\n    const currencyPerPage: number = yield select(getCurrencyCapacity);\n    const maxPossiblePages = Math.ceil(currencyListData.length / currencyPerPage);\n    yield put<ActionTypes>(setMaxPage(maxPossiblePages));\n    yield put<ActionTypes>(setCurrencyData(currencyListData));\n    yield fork(watchNewCurrency);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n}\n\nexport function* watchFetchCurrencyList(): Generator<ForkEffect<never>, void, unknown> {\n  yield takeEvery(CurrencyActionTypes.FETCH_CURRENCY_DATA, fetchCurrencyList);\n}\n"],"mappings":"AAAA,SAASA,OAAT,EAAgCC,YAAhC,QAAoD,YAApD;AACA,SAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,IAA7C,EAAmDC,IAAnD,EAAyDC,IAAzD,EAA+DC,KAA/D,QAA4E,oBAA5E;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,SAA2BC,MAA3B,QAAyC,qBAAzC;AAEA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,YAAtC,QAA0D,UAA1D;AACA,SAASC,mBAAT,QAAoC,YAApC;AACA,SAASC,mBAAT,QAAoC,SAApC;;AAEA,SAASC,oBAAT,CAA8BC,MAA9B,EAAwD;EACtD,OAAOhB,YAAY,CAAEiB,IAAD,IAAU;IAC5BD,MAAM,CAACE,cAAP;IACAF,MAAM,CAACG,SAAP,CAAkBC,QAAD,IAAc;MAC7B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACC,IAApB,CAAb;MACAJ,IAAI,CAACI,IAAD,CAAJ;IACD,CAHD;IAIA,OAAO,MAAM;MACXL,MAAM,CAACQ,eAAP;IACD,CAFD;EAGD,CATkB,EAShBzB,OAAO,CAAC0B,OAAR,CAAgB,CAAhB,CATgB,CAAnB;AAUD;;AAED,UAAUC,gBAAV,GAA6B;EAC3B,MAAMC,YAAmC,GAAG,MAAMvB,IAAI,CAACW,oBAAD,EAAuBN,MAAvB,CAAtD;;EACA,OAAO,IAAP,EAAa;IACX,IAAI;MACF,MAAMmB,OAA+B,GAAG,MAAMvB,IAAI,CAACsB,YAAD,CAAlD;MACA,MAAMpB,KAAK,CAAC,IAAD,CAAX;MACA,MAAMN,GAAG,CAACW,YAAY,CAACgB,OAAD,CAAb,CAAT;IACD,CAJD,CAIE,MAAM;MACND,YAAY,CAACE,KAAb;IACD;EACF;AACF;;AAED,UAAUC,iBAAV,GAA8B;EAC5B,IAAI;IACF,MAAMC,gBAAgC,GAAG,MAAM3B,IAAI,CAACI,QAAQ,CAACwB,eAAV,CAAnD;IACA,MAAMC,eAAuB,GAAG,MAAM/B,MAAM,CAACW,mBAAD,CAA5C;IACA,MAAMqB,gBAAgB,GAAGC,IAAI,CAACC,IAAL,CAAUL,gBAAgB,CAACM,MAAjB,GAA0BJ,eAApC,CAAzB;IACA,MAAMhC,GAAG,CAAcU,UAAU,CAACuB,gBAAD,CAAxB,CAAT;IACA,MAAMjC,GAAG,CAAcS,eAAe,CAACqB,gBAAD,CAA7B,CAAT;IACA,MAAMzB,IAAI,CAACoB,gBAAD,CAAV;EACD,CAPD,CAOE,OAAOY,KAAP,EAAc;IACd;IACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF;;AAED,OAAO,UAAUG,sBAAV,GAAgF;EACrF,MAAMtC,SAAS,CAACW,mBAAmB,CAAC4B,mBAArB,EAA0CZ,iBAA1C,CAAf;AACD"},"metadata":{},"sourceType":"module"}